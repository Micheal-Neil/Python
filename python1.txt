#!/user/bin/env.python
# -*- coding: UTF-8 -*-


#行和缩进
#
#学习 Python 与其他语言最大的区别就是，Python 的代码块不使用大括号 {} 来控制类，函数以及其他逻辑判断。
#python 最具特色的就是用缩进来写模块。
#
#缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量，这个必须严格执行。如下所示：
#代码一
#if True:
#    print "True"
#else:
#  print "False"
#
#  代码二
#  if True:
#    print "Answer"
#    print "True"
#else:
#    print "Answer"
#    # 没有严格缩进，在执行时会报错
#  print "False"
#
#  IndentationError: unexpected indent 错误是 python 编译器是在告诉你"Hi，老兄，你的文件里格式不对了，
#  可能是tab和空格没对齐的问题"，所有 python 对格式要求非常严格。
#
#如果是 IndentationError: unindent does not match any outer indentation level错误表明，
#你使用的缩进方式不一致，有的是 tab 键缩进，有的是空格缩进，改为一致即可。
#
#因此，在 Python 的代码块中必须使用相同数目的行首缩进空格数。
#
#建议你在每个缩进层次使用 单个制表符 或 两个空格 或 四个空格 , 切记不能混用
#
#多行语句
#
#Python语句中一般以新行作为为语句的结束符。
#
#但是我们可以使用斜杠（ \）将一行的语句分为多行显示，如下所示：
#
#total = item_one + \
#        item_two + \
#        item_three
#
#语句中包含 [], {} 或 () 括号就不需要使用多行连接符。如下实例：
#
#days = ['Monday', 'Tuesday', 'Wednesday',
#        'Thursday', 'Friday']
#
#
#        Python 引号
#
#Python 可以使用引号( ' )、双引号( " )、三引号( ''' 或 """
#来表示字符串，引号的开始与结束必须的相同类型的。
#
#其中三引号可以由多行组成，编写多行文本的快捷语法，常用于文档字符串，在文件的特定地点，被当做注释。
#
#word = 'word'
#sentence = "这是一个句子。"
#paragraph = """这是一个段落。
#包含了多个语句"""
#
#Python注释
#
#python中单行注释采用 # 开头。
#
# 第一个注释
#print "Hello, Python!";  # 第二个注释
#
#输出结果：
#
#Hello, Python!
#
#注释可以在语句或表达式行末：
#
#name = "Madisetti" # 这是一个注释
#
#python 中多行注释使用三个单引号(''')或三个双引号(""")。
#'''
#这是多行注释，使用单引号。
#这是多行注释，使用单引号。
#这是多行注释，使用单引号。
#'''
#
#"""
#这是多行注释，使用双引号。
#这是多行注释，使用双引号。
#这是多行注释，使用双引号。
#"""
#
#Python空行
#
#函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。
#
#空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。
#
#记住：空行也是程序代码的一部分。
#等待用户输入
#
#下面的程序执行后就会等待用户输入，按回车键后就会退出：
#
#!/usr/bin/python
#
#raw_input("\n\nPress the enter key to exit.")
#
#以上代码中 ，"\n\n"在结果输出前会输出两个新的空行。一旦用户按下 enter(回车) 键退出，其它键显示。
#
#Print 输出
#
#print 默认输出是换行的，如果要实现不换行需要在变量末尾加上逗号：
#
#
if True:
    print "True"
else:
  print "False"

raw_input("\n\nPress the enter key to exit.")
if True:
      print "Answer"
      print "True"
else:
      print "Answer"
      print "False"

x="a"
y="b"
# 换行输出
print x
print y

print '---------'
# 不换行输出
print x,
print y,

# 不换行输出
print x,y

l1 = ['a','b','c']
l2 = [1,2,3]
d = {}
for i in range(len(l1)):
    d.setdefault(l1[i],l2[i])
print d

keys = ['a','b']
values = [1,2]
print({keys[i]: values[i] for i in range(len(keys))})


#如果你要实现从字符串中获取一段子字符串的话，可以使用变量[头下标:尾下标]，就可以截取相应的字符串，其中下标是从0
#开始算起，可以是正数或负数，下标可以为空表示取到头或尾。
#比如:
#s = 'ilovepython'
#s[1:5]
#的结果是love。
#
#当使用以冒号分隔的字符串，python返回一个新的对象，结果包含了以这对偏移标识的连续的内容，左边的开始是包含了下边界。
#
#上面的结果包含了s[1]
#的值l，而取到的最大范围不包括上边界，就是s[5]
#的值p。
#
#加号（+）是字符串连接运算符，星号（ * ）是重复操作。如下实例：
#实例(Python2.0 +)
#
str = 'I am a loser!'
#
print str                             # 输出完整字符串
print str[0]                          # 输出字符串中的第一个字符
print str[2:5]                        # 输出字符串中第三个至第五个之间的字符串
print str[2:]                         # 输出从第三个字符开始的字符串
print str * 2                         # 输出字符串两次
print str + " No, you are the king "  # 输出连接的字符串
#
#List（列表） 是
#Python
#中使用最频繁的数据类型。
#
#列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（即嵌套）。
#
#列表用[]
#标识，是
#python
#最通用的复合数据类型。
#
#列表中值的切割也可以用到变量[头下标:尾下标] ，就可以截取相应的列表，从左到右索引默认
#0
#开始，从右到左索引默认 - 1
#开始，下标可以为空表示取到头或尾。
#
#加号 + 是列表连接运算符，星号 * 是重复操作。如下实例：
#实例(Python2.0 +)
#
list = ['runoob', 786, 2.23, 'john', 70.2]
tinylist = [123, 'john']
#
print list             # 输出完整列表
print list[0]          # 输出列表的第一个元素
print list[1:3]        # 输出第二个至第三个的元素
print list[2:]         # 输出从第三个开始至列表末尾的所有元素
print tinylist * 2     # 输出列表两次
print list + tinylist  # 打印组合的列表
#
#tuple元组是另一个数据类型，类似于List（列表）。
#
#元组用"()"标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表。
#实例(Python2.0 +)
#
tuple = ('runoob', 786, 2.23, 'john', 70.2)
tinytuple = (123, 'john')
#
print tuple              # 输出完整元组
print tuple[0]           # 输出元组的第一个元素
print tuple[1:3]         # 输出第二个至第三个的元素
print tuple[2:]          # 输出从第三个开始至列表末尾的所有元素
print tinytuple * 2      # 输出元组两次
print tuple + tinytuple  # 打印组合的元组
#
#
#以下是元组无效的，因为元组是不允许更新的。而列表是允许更新的：
#实例(Python2.0 +)
#
tuple = ('runoob', 786, 2.23, 'john', 70.2)
list = ['runoob', 786, 2.23, 'john', 70.2]
#tuple[2] = 1000      # 元组中是非法应用
list[2] = 1000        # 列表中是合法应用
print(list[2])
#
#
#字典(dictionary)是除列表以外python之中最灵活的内置数据结构类型。列表是有序的对象集合，字典是无序的对象集合。
#
#两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。
#
#字典用"{ }"标识。字典由索引(key)和它对应的值value组成。
#实例(Python2.0 +)
#
dict = {}
dict['one'] = "This is one"
dict[2] = "This is two"
#
tinydict = {'name': 'john', 'code': 6734, 'dept': 'sales'}
#
print dict['one']        # 输出键为'one' 的值
print dict[2]            # 输出键为 2 的值
print tinydict           # 输出完整的字典
print tinydict.keys()    # 输出所有键
print tinydict.values()  # 输出所有值
#
#
#变量赋值
#
a = 1
b = "god"
#
#字符串赋值
#
str = 'this is string 1'
#
#列表串赋值
#
list = ['this', 'is', 'list', 2]
#
#元组赋值
#
tuple = ('this', 'is', 'tuple', 3)
#
#字典赋值
#
dict = {1:'this', 2:'is', 3:'dictionary', 4:4}
#
