#!/user/bin/env.python
# -*- coding: UTF-8 -*-
#
#--------------------------------------------------Operator---------------------------------------------------------
#
#The following example demonstrates the operation of all Python arithmetic operators:
#
var_a = 21
var_b = 10
var_c = 0
#
var_c = var_a + var_b
print "1 - var_c The value is：", var_c
#
var_c = var_a - var_b
print "2 - var_c The value is：", var_c
#
var_c = var_a * var_b
print "3 - var_c The value is：", var_c
#
var_c = var_a / var_b
print "4 - var_c The value is：", var_c
#
var_c = var_a % var_b
print "5 - var_c The value is：", var_c
#
# Modify the values of variables var_a var_b and var_c
var_a = 2
var_b = 3
var_c = var_a ** var_b
#Power - Returns the y power of x
print "6 - var_c The value is：", var_c
#
var_a = 10
var_b = 5
var_c = var_a // var_b
#Divide the integer part of the returnor
print "7 - var_c The value is：", var_c
#
#----------------------------------------------------Comparison operator-----------------------------------------
#
#
#The following example demonstrates the operation of all Python comparison operators:
var_a = 21
var_b = 10
var_c = 0
#
#eq-equal;ne-not equal;lt-Less than;le-Less than or equal to;
# gt-more than the;ge-Greater than or equal to
#
if (var_a == var_b):
    print "1 - var_a eq var_b"
else:
    print "1 - var_a ne var_b"
#
if (var_a != var_b):
    print "2 - var_a ne var_b"
else:
    print "2 - var_a eq var_b"
#
if (var_a <> var_b):
    print "3 - var_a ne var_b"
else:
    print "3 - var_a eq var_b"
#
if (var_a < var_b):
    print "4 - var_a lt var_b"
else:
    print "4 - var_a ge var_b"
#
if (var_a > var_b):
    print "5 - var_a gt var_b"
else:
    print "5 - var_a le var_b"
#
# Modify the values of variables a and b
var_a = 5
var_b = 20
if (var_a <= var_b):
    print "6 - var_a le var_b"
else:
    print "6 - var_a gt var_b"
#
if (var_b >= var_a):
    print "7 - var_b ge var_a"
else:
    print "7 - var_b lt var_a"
#
#------------------------------------------------Python assignment operator----------------------------------
#
#
#The following example demonstrates the operation of all Python assignment operators:
var_a = 21
var_b = 10
var_c = 0
#
var_c = var_a + var_b
print "1 - var_c the value is：", var_c
#
var_c += var_a
print "2 - var_c the value is：", var_c
#
var_c *= var_a
print "3 - var_c the value is：", var_c
#
var_c /= var_a
print "4 - var_c the value is：", var_c
#
var_a = 2
var_c %= var_a
print "5 - var_c the value is：", var_c
#
var_c **= var_a
print "6 - var_c the value is：", var_c
#
var_c //= var_a
print "7 - var_c the value is：", var_c
#
#
#-----------------------------------------Python logical operators---------------------------------
#
#The Python language supports logical operators, assuming that the variable var_a is 10 and var_b is 20:
var_a = 10
var_b = 20
#
if (var_a and var_b):
    print "1 - variable var_a and var_b are true"
else:
    print "1 - variable var_a and var_b there is one that is not true"
#
if (var_a or var_b):
    print "2 - variable var_a and var_b are true,Or one of the variables is true"
else:
    print "2 - variable var_a and var_b not true"
#
# Modify the value of variable var_a
var_a = 0
if (var_a and var_b):
    print "3 - var_a and b are true"
else:
    print "3 - variable var_a and var+_b there is one that is not true"
#
if (var_a or var_b):
    print "4 - variable var_a and var_b are true,Or one of the variables is true"
else:
    print "4 - variable var_a and var_b not true"
#
if not (var_a and var_b):
    print "5 - variable var_a and var_b are false,or one of the variable is false"
else:
    print "5 - variable var_a and var_b are true"
#
#---------------------------------------------------------Python member operator------------------------------------
#
#In addition to some of the above operators, Python also supports member operators,
# the test instance contains a series of members, including strings, lists or tuples.
#
var_a = 10
var_b = 20
list = [1, 2, 3, 4, 5]
#
if (var_a in list):
    print "1 - variable var_a In the list in the given list"
else:
    print "1 - variable var_a Not in the list of the given list"
#
if (var_b not in list):
    print "2 - var_b Not in the list of the given list"
else:
    print "2 - var_b In the list in the given list"
#
# Modify the value of variable var_a
var_a = 2
if (var_a in list):
    print "3 - var_a In the list in the given list"
else:
    print "3 - variable var_a Not in the list of the given list"
#
#------------------------------------------------------Python identity operator-----------------------------------
#
#The identity operator is used to compare the storage units of two objects
#(Determine whether the two identifiers are referenced from an object)
#The following example demonstrates the operation of all Python identity operators:
var_a = 20
var_b = 20
#
#x is y, similar to id (x) == id (y), true if the same object is referenced, otherwise False
#
if ( var_a is var_b ):
    print "1 - a and b have the same logo"
else:
    print "1 - a and b do not have the same logo"
#
if ( var_a is not var_b ):
    print "2 - a and b do not have the same logo"
else:
    print "2 - a and b have the same logo"
#
# Modify the value of variable b
var_b = 30
if ( id (var_a) == id (var_b) ):
    print "3 - a and b have the same logo"
else:
    print "3 - a and b do not have the same logo"
#
if ( id (var_a) <> id (var_b) ):
    print "4 - a and b do not have the same logo"
else:
    print "4 - a and b have the same logo"
#
#Here is and == similar to the translation of the principle of transmission
#and transmission address. Or is only the pointer is passed to determine whether
#to point to the same address block, so that the parameters on both sides of the
#same point in memory to the same address block,
#

